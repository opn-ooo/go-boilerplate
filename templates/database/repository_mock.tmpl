package repositories

import (
    "context"

	"{{ .PackageName }}/internal/models"
	"gorm.io/gorm"
)

// Mock{{ .Name.Singular.Title }}Repository ...
type Mock{{ .Name.Singular.Title }}Repository struct {
}

// Get ... Get multiple entities
func (repository *Mock{{ .Name.Singular.Title }}Repository) Get(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*[]models.{{ .Name.Singular.Title }}, error) {
    model, _ := models.GetFake{{ .Name.Singular.Title }}()
	data := []models.{{ .Name.Singular.Title }} {*model}
	return &data, nil
}

// Count ... Count entities
func (repository *Mock{{ .Name.Singular.Title }}Repository) Count(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (int64, error) {
    return 0, nil
}

// First ... Get single entity
func (repository *Mock{{ .Name.Singular.Title }}Repository) First(ctx context.Context, scopes ...func(*gorm.DB) *gorm.DB) (*models.{{ .Name.Singular.Title }}, error) {
    return models.GetFake{{ .Name.Singular.Title }}()
}

// Create ...
func (repository *Mock{{ .Name.Singular.Title }}Repository) Create(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	return model, nil
}

// Save ...
func (repository *Mock{{ .Name.Singular.Title }}Repository) Save(ctx context.Context, model *models.{{ .Name.Singular.Title }}) (*models.{{ .Name.Singular.Title }}, error) {
	return model, nil
}

// Delete ... Delete entity
func (repository *Mock{{ .Name.Singular.Title }}Repository) Delete(ctx context.Context, model *models.{{ .Name.Singular.Title }}) error {
    return nil
}

{{- range .Columns}}
{{- if .IsCommonColumn }}
{{- else }}
func (repository *Mock{{ .TableName.Singular.Title }}Repository) By{{ .ObjectName }}(param {{ .ObjectType }}) func(*gorm.DB) *gorm.DB {
    return func(db *gorm.DB) *gorm.DB {
        return db.Where("{{ .TableName.Original }}.{{ .Name.Original }} = ?", param)
    }
}
{{- end -}}
{{- end }}
